library(effsize)
cliff.delta(benign_10000$Pathogenicity.Score,
pathogenic_10000$Pathogenicity.Score)
cliff.delta(benign_2980$Pathogenicity.Score,
pathogenic_2980$Pathogenicity.Score)
cliff.delta(benign_500$Pathogenicity.Score,
pathogenic_500$Pathogenicity.Score)
##Get p values for same comparisons
wilcox.test(benign_10000$Pathogenicity.Score, pathogenic_10000$Pathogenicity.Score)
wilcox.test(benign_2980$Pathogenicity.Score,pathogenic_2980$Pathogenicity.Score)
wilcox.test(benign_500$Pathogenicity.Score,pathogenic_500$Pathogenicity.Score)
##Combine data in single df for ggplot
df_plot<-data.frame("score"=c(benign_10000$Pathogenicity.Score,
pathogenic_10000$Pathogenicity.Score,
benign_2980$Pathogenicity.Score,
pathogenic_2980$Pathogenicity.Score,
benign_500$Pathogenicity.Score,
pathogenic_500$Pathogenicity.Score),
"group"=factor(c(rep.int(x = "Benign 10K", times = nrow(benign_10000)),
rep.int(x = "Pathogenic 10K", times = nrow(pathogenic_10000)),
rep.int(x = "Benign 2980", times = nrow(benign_2980)),
rep.int(x = "Pathogenic 2980", times = nrow(pathogenic_2980)),
rep.int(x = "Benign 500", times = nrow(benign_500)),
rep.int(x = "Pathogenic 500", times = nrow(pathogenic_500))
), levels = c("Benign 10K","Pathogenic 10K","Benign 2980","Pathogenic 2980","Benign 500","Pathogenic 500"), ordered = TRUE),
"subset"=factor(c(rep.int(x = "10K", times = nrow(benign_10000)),
rep.int(x = "10K", times = nrow(pathogenic_10000)),
rep.int(x = "2980", times = nrow(benign_2980)),
rep.int(x = "2980", times = nrow(pathogenic_2980)),
rep.int(x = "500", times = nrow(benign_500)),
rep.int(x = "500", times = nrow(pathogenic_500))
), levels = c("10K","2980","500"), ordered = TRUE),
"type"=factor(c(rep.int(x = "Benign", times = nrow(benign_10000)),
rep.int(x = "Pathogenic", times = nrow(pathogenic_10000)),
rep.int(x = "Benign", times = nrow(benign_2980)),
rep.int(x = "Pathogenic", times = nrow(pathogenic_2980)),
rep.int(x = "Benign", times = nrow(benign_500)),
rep.int(x = "Pathogenic", times = nrow(pathogenic_500))
), levels = c("Benign","Pathogenic"), ordered = TRUE)
)
#########################
# Plotting with ggplot2
#########################
library(ggplot2)
theme_set(theme_classic())
tiff("/home/victor/Documentos/phD/ArticlesWritting/Postre_manuscript/Revision_NAR/Manuscrito_New_Version/SupplementaryMaterial/SupplementaryFigures/Supplementary_Figure_11/SFig11_c.tiff", units="in",
width=3.5, height=3, res=300)
ggplot(df_plot, aes(x=subset, y=score, fill=type))+
geom_boxplot(color="black") +
scale_fill_manual(values = c("#00ccff","#ff6666"))+theme(legend.position = "none")
dev.off()
###############################################
## Generating stacked barplots for percentages of predicted pathogenic by TADA
## among those that we predict pathogenic
###############################################
dataStackedBarplot<-data.frame(
"type"=factor(c("BenignTADA",
"PathogenicTADA",
"BenignTADA",
"PathogenicTADA",
"BenignTADA",
"PathogenicTADA"), levels = c("BenignTADA","PathogenicTADA"), ordered = TRUE),
"subset"=factor(c("10K",
"10K",
"2980",
"2980",
"500",
"500"
), levels = c("10K","2980","500"), ordered = TRUE),
"percentage"=c(
sum(pathogenic_10000$Pathogenicity.Label == 0)/nrow(pathogenic_10000),
sum(pathogenic_10000$Pathogenicity.Label == 1)/nrow(pathogenic_10000),
sum(pathogenic_2980$Pathogenicity.Label == 0)/nrow(pathogenic_2980),
sum(pathogenic_2980$Pathogenicity.Label == 1)/nrow(pathogenic_2980),
sum(pathogenic_500$Pathogenicity.Label == 0)/nrow(pathogenic_500),
sum(pathogenic_500$Pathogenicity.Label == 1)/nrow(pathogenic_500)
)
)
##Plotting
tiff("/home/victor/Documentos/phD/ArticlesWritting/Postre_manuscript/Revision_NAR/Manuscrito_New_Version/SupplementaryMaterial/SupplementaryFigures/Supplementary_Figure_11/SFig11_d.tiff", units="in",
width=3, height=3, res=300)
ggplot(data = dataStackedBarplot, aes(x=subset, y=percentage, fill=type)) + geom_bar(stat = "identity", width = .7)  +
ggtitle("TADA predictions for POSTRE pathogenic") +
theme(axis.text=element_text(size=12)) +
scale_fill_manual(values = c("#660066","#fce94f")) +theme(legend.position = "none")
dev.off()
# p1<-ggplot(df_plot, aes(x=group, y=score,fill=group, color=group)) +
#   # geom_violin(trim=TRUE,
#   #             color="white", scale = "area", width=1)+
#   geom_boxplot(width=0.1, col="black", fill="white",outlier.shape = NA, notch = TRUE)+
#   # scale_color_manual(values=c("brown1","chartreuse3","blue"))+
#   ##Como meter el internal boxplot sin los puntos que quedan fuera de los whiskers
#   #
#   # coord_cartesian(ylim = ylim1) +
#   theme_minimal() +
#   ggtitle("Pathogenic Score") +
#   ##Upcoming is to remove xlabels
#   theme(axis.text.x=element_blank(),
#         axis.ticks.x=element_blank())+
#   theme_gray(base_size = 14)
#
# p1
#
# ##Get some statistics for previous plots
#
# barplot(prop.table(table(pathogenic_10000$Pathogenicity.Label)),
#         main="Pathogenic 10000")
#
# barplot(prop.table(table(pathogenic_2980$Pathogenicity.Label)),
#         main="Pathogenic 2980")
#
# barplot(prop.table(table(pathogenic_500$Pathogenicity.Label)),
#         main="Pathogenic 500")
#
# par(mfrow=c(3,3))
# ##Row info 10000 SVs
# boxplot(benign_10000$Pathogenicity.Score,
#         pathogenic_10000$Pathogenicity.Score,
#         main="Pathogenic scores 10000",
#         names=c("Benign", "Pathogenic"),
#         xlab="POSTRE predictions", ylab= "TADA scores")
#
# wilcox.test(benign_10000$Pathogenicity.Score,
#             pathogenic_10000$Pathogenicity.Score)
#
# cliff.delta(benign_10000$Pathogenicity.Score,
#             pathogenic_10000$Pathogenicity.Score)
#
# barplot(prop.table(table(benign_10000$Pathogenicity.Label)),
#         main="Not Pathogenic 10000")
#
# barplot(prop.table(table(pathogenic_10000$Pathogenicity.Label)),
#         main="Pathogenic 10000")
#
# ##Row info 2980 SVs
# boxplot(benign_2980$Pathogenicity.Score,
#         pathogenic_2980$Pathogenicity.Score,
#         main="Pathogenic scores 2980",
#         names=c("Benign", "Pathogenic"),
#         xlab="POSTRE predictions", ylab= "TADA scores")
#
# wilcox.test(benign_2980$Pathogenicity.Score,
#             pathogenic_2980$Pathogenicity.Score)
#
# cliff.delta(benign_2980$Pathogenicity.Score,
#             pathogenic_2980$Pathogenicity.Score)
#
# barplot(prop.table(table(benign_2980$Pathogenicity.Label)),
#         main="Not Pathogenic 2980")
#
# barplot(prop.table(table(pathogenic_2980$Pathogenicity.Label)),
#         main="Pathogenic 2980")
#
# ##Row info 500 SVs
# boxplot(benign_500$Pathogenicity.Score,
#         pathogenic_500$Pathogenicity.Score,
#         main="Pathogenic scores 500",
#         names=c("Benign", "Pathogenic"),
#         xlab="POSTRE predictions", ylab= "TADA scores")
#
# wilcox.test(benign_500$Pathogenicity.Score,
#             pathogenic_500$Pathogenicity.Score)
#
# cliff.delta(benign_500$Pathogenicity.Score,
#             pathogenic_500$Pathogenicity.Score)
#
# barplot(prop.table(table(benign_500$Pathogenicity.Label)),
#         main="Not Pathogenic 500")
#
# barplot(prop.table(table(pathogenic_500$Pathogenicity.Label)),
#         main="Pathogenic 500")
shiny::runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
shiny::runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
15/21
27/41
39/41
15/21
shiny::runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
#######################################
## Plotting differences post matching
#######################################
load(file = "~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/Robjects/additionalRelevantObjects_Matched_RandomLocated_Pathogenic_SVs.RData")
############################################
## Graficando
############################################
yLim_sizeBoxplot<-c(0,40)
yLim_percentagePredictions<-c(0,65)
# nIterations<-length(percentages_random)
## Chequear tamanyos de algunas iteraciones
## Que se ajuste a los de referencia
##Los de referencia:
info_random<-as.numeric(lapply(distrib_candidateG_random, FUN = median ))
info_original<-as.numeric(lapply(distrib_candidateG_original, FUN = median ))
percentages_original
shiny::runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
shiny::runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
colnames(candidateGenesInfo)
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
colnames(resultsPerSV)
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
shiny::runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
####################################################################################
## Multiple SV Analysis
##Usar el core del script de analyses de controles... RUN ALSO, WITH BOTH RUNMODES!!!
##Core script from:~/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/SV_LocalAnalysis/MultiplePatientAnalysis/evaluating_Specificity_OnHealthyIndividuals/approach5_Biggest_500SVs/2_a5_PerformingPredictions.R
##Para el Html ya filtro luego por Standard si quiero, que estaran ahi los resultadoss
####################################################################################
##Loading patients data
load("~/Dropbox/Cantabria/PhD_Project/DatosPHD/fichasPacientes/AllPatientsInfo.RData")
##Defining output filename:
outputObjectName<-"/home/victor/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/multiplePatientAnalysis/results_MultiplePatientAnalyses.RData"
########################
# NOT TOUCHING FROM HERE. Use the remaining script above for all kind of prediction, either controls or pathogenic
# When doing them locally
########################
##So far modelled in the software
##When doing multiple patient and pheno analysis, considered pheno
##If not here,  not do prediction
consideredPheno<-c("head_neck",
"cardiovascular",
"limbs",
"neurodevelopmental")##As more phenos considered they will appear here
###############################################
## Testing Performance on selected controls
###############################################
####################################################################################
## Multiple SV Analysis
####################################################################################
start<-Sys.time()
###Setwd in the folder where all the app info is hosted
##To use the most recent function versions
setwd("~/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app/")
################################################
## Iterating over Cohort of controls
################################################
####################################
###Let's load required Functions
####################################
source("scripts_To_Load_Data/metaFunctionLoad.R")
##Required object for Single Prediction
##Loading multidata object, to avoid multiple reloading
load("data/MultiDataList.RData")
##############################
##Patient Analysis &&  Results
##############################
all_patientResults<-list()
##Tracking Status
nPatient<-0
cohortTractablePhenos<-character() ##To track patient provided phenotypes, only sections in the html related to patient phenotypes will be shown. No sense on showing cardiovascular sectio in the html, if no patient with cardiovascular.
##Phenos considered when we also have data from them (eg if patient limb but yet no limb data also not section)
##Let's do the prediction for each running mode
runningMode_options<-c("Standard","High-Specificity") ## "High-Sensitivity" DEPRECATED
resultsPerMode<-list()##To store results
for(runMode in runningMode_options){
# print(runMode)
for(patient in rownames(AllPatientsInfo)){
# print("                   ")
# print(patient)
nPatient<-nPatient+1
cat("nPatient: ",nPatient,"\n")
########################################
## Selecting Patient Info
patientInfo<-AllPatientsInfo[patient,]
all_patientPheno<-unlist(strsplit(x = patientInfo$Phenotype, split = ",", fixed = TRUE))
for(pheno in all_patientPheno){
# print("                   ")
# print(pheno)
##Working on each pheno separately, running prediction
monoPheno_patientInfo<-patientInfo
monoPheno_patientInfo$Phenotype<-pheno
# print(monoPheno_patientInfo)
##If pheno among the ones considered in the app, run prediction
if(pheno %in% consideredPheno){
############################
## Carrying prediction #####
############################
cohortTractablePhenos<-c(cohortTractablePhenos, pheno)##We track this phenotype, and we will provide information for it in the multi pat section
patientResults<-list()
patientResults<-tryCatch({
##If there is an error the following instruction will not be terminated
##In multiple screening we do not generate graphics,so only master_scoring_function used, and not the wrapper for graphics one
patientResults<-master_scoring_function(patientInfo = monoPheno_patientInfo, runMode = runMode, user_tadMapInfo = list(), MultiDataList = MultiDataList)
##If there was no error patientResults$Status == "OK" or "OK, but NO genes associated with SV"
},error = function(err){
patientResults$Status<-"ERROR"
return(patientResults)
})
################################################
## Storaging Results per Patient & Phenotype
################################################
##To avoid the object size to be unnecessary huge, only mantain strictly necessary info
##We can maybe even simplify this more by using the matrix behind heatmap
##but let's see for now how it goes
patientResults$resultsPerPhase_secondaryInfo<-NULL
patientResults$genomeBrowser_links<-NULL
patientResults$allAffectedGenes_positionalInfo<-NULL
patientResults$MasterEnh_map<-NULL
patientResults$resultsPerPhase<-NULL
all_patientResults[[patient]][[pheno]]<-patientResults
}
}
}
resultsPerMode[[runMode]]<-all_patientResults
}
start
Sys.time()
#####################
###Saving results
######################
save(resultsPerMode, file = outputObjectName)
#########################################
## Parsing Predictions Patients
#########################################
##CHECK PATIENTS WITH ERRORS RISED IF ANY
##TAKE AS REFERENCE SCRIPT: ~/Documentos/phD/SV_app_backup/SV_LocalAnalysis_backup_21Dic_2021/MultiplePatientAnalysis/evaluatingSpecificity_OnHealthyIndividuals/Considering_Most_Of_SVs/3_ParsingResults.R
############
## Loading prediction results
load("~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/multiplePatientAnalysis/results_MultiplePatientAnalyses.RData")
## Loading SVs information
load("~/Dropbox/Cantabria/PhD_Project/DatosPHD/fichasPacientes/AllPatientsInfo.RData")
########################
# NOT TOUCHING FROM HERE. Use the remaining script above for all kind of prediction, either controls or pathogenic
# When doing them locally
########################
##Phenotypes to be considered
consideredPheno<-c("head_neck",
"cardiovascular",
"limbs",
"neurodevelopmental")##As more phenos considered they will appear here
###Setwd in the folder where all the app info is hosted
setwd("~/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app/")
##############################################
##Loading Required Function
source("functions/multiple_SV_Functions/cohortResults_Parser.R")
#############
#Parsing predictions
cohort_results_hiSpe<-cohortResults_Parser(minScore = 0.8, all_patientResults = resultsPerMode$`High-Specificity`,
consideredPheno =consideredPheno,##Improve as more Phenos can be processed##consideredPheno,##Multiple Option, for now stick with head_neck
discardRelevantByBrokenGene = FALSE,
AllPatientsInfo = AllPatientsInfo )
cohort_results_standard<-cohortResults_Parser(minScore = 0.8, all_patientResults = resultsPerMode$Standard,
consideredPheno =consideredPheno,##Improve as more Phenos can be processed##consideredPheno,##Multiple Option, for now stick with head_neck
discardRelevantByBrokenGene = FALSE,
AllPatientsInfo = AllPatientsInfo )
###################################################
## Saving parsed results, Used to generate HTML
###################################################
save(cohort_results_standard,
file = "~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/multiplePatientAnalysis/StandardMode_ParsedResults_MultiplePatientAnalyses.RData")
save(cohort_results_hiSpe,
file = "~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/multiplePatientAnalysis/HighSpecificityMode_ParsedResults_MultiplePatientAnalyses.RData")
##Save info candidate genes for attempt of matching
originalPathogenic_candidateGenesInfo<-cohort_results_standard$candidateGenesInfo
save(originalPathogenic_candidateGenesInfo,
file = "~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/Robjects/candidateGenesInfo_Pathogenic_SVs.RData")
###################################
## Exploring cohort Parsed results
###################################
targetPhenos<-c("head_neck",
"cardiovascular",
"limbs",
"neurodevelopmental")##As more phenos considered they will appear here
##Required functions
source("/home/victor/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/SV_LocalAnalysis/MultiplePatientAnalysis/functions/multiSV_analysis_stats_functions.R",
local = TRUE)
##Para High specificity
multiSV_analysis_stats(targetPhenos = targetPhenos, targetResults = cohort_results_hiSpe)
#Para Standard
multiSV_analysis_stats(targetPhenos = targetPhenos, targetResults = cohort_results_standard)
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "neurodevelopmental")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "cardiovascular")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "limbs")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "head_neck")
#####Get number of patients with errors
cohort_results_hiSpe$error_General_Info
cohort_results_standard$error_General_Info
####################################################
##Let's check number of candidateGenes per SV
# View(cohort_results_standard$candidateGenesInfo)
summary(cohort_results_standard$candidateGenesInfo$Ncandidates)##Most of SVs around 6-7 candidate genes
# plot(density(cohort_results_standard$candidateGenesInfo$Ncandidates))
# boxplot(cohort_results_standard$candidateGenesInfo$Ncandidates)
#####################
## Estudio tamanyos
#######################################
##Computing lengths, and excluding translocations, since make no sense compute size and no transloc in controls
AllPatientsInfo<-gettingLengths(targetMatrix = AllPatientsInfo)
table(AllPatientsInfo$TypeSV)
summary(subset(AllPatientsInfo, TypeSV=="Deletion")$length)
summary(subset(AllPatientsInfo, TypeSV=="Duplication")$length)
summary(subset(AllPatientsInfo, TypeSV=="Inversion")$length)
#########################################
## Parsing Predictions Patients
#########################################
##CHECK PATIENTS WITH ERRORS RISED IF ANY
##TAKE AS REFERENCE SCRIPT: ~/Documentos/phD/SV_app_backup/SV_LocalAnalysis_backup_21Dic_2021/MultiplePatientAnalysis/evaluatingSpecificity_OnHealthyIndividuals/Considering_Most_Of_SVs/3_ParsingResults.R
############
## Loading prediction results
load("~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/multiplePatientAnalysis/results_MultiplePatientAnalyses.RData")
## Loading SVs information
load("~/Dropbox/Cantabria/PhD_Project/DatosPHD/fichasPacientes/AllPatientsInfo.RData")
########################
# NOT TOUCHING FROM HERE. Use the remaining script above for all kind of prediction, either controls or pathogenic
# When doing them locally
########################
##Phenotypes to be considered
consideredPheno<-c("head_neck",
"cardiovascular",
"limbs",
"neurodevelopmental")##As more phenos considered they will appear here
###Setwd in the folder where all the app info is hosted
setwd("~/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app/")
##############################################
##Loading Required Function
source("functions/multiple_SV_Functions/cohortResults_Parser.R")
#############
#Parsing predictions
cohort_results_hiSpe<-cohortResults_Parser(minScore = 0.8, all_patientResults = resultsPerMode$`High-Specificity`,
consideredPheno =consideredPheno,##Improve as more Phenos can be processed##consideredPheno,##Multiple Option, for now stick with head_neck
discardRelevantByBrokenGene = FALSE,
AllPatientsInfo = AllPatientsInfo )
cohort_results_standard<-cohortResults_Parser(minScore = 0.8, all_patientResults = resultsPerMode$Standard,
consideredPheno =consideredPheno,##Improve as more Phenos can be processed##consideredPheno,##Multiple Option, for now stick with head_neck
discardRelevantByBrokenGene = FALSE,
AllPatientsInfo = AllPatientsInfo )
###################################################
## Saving parsed results, Used to generate HTML
###################################################
save(cohort_results_standard,
file = "~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/multiplePatientAnalysis/StandardMode_ParsedResults_MultiplePatientAnalyses.RData")
save(cohort_results_hiSpe,
file = "~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/multiplePatientAnalysis/HighSpecificityMode_ParsedResults_MultiplePatientAnalyses.RData")
##Save info candidate genes for attempt of matching
originalPathogenic_candidateGenesInfo<-cohort_results_standard$candidateGenesInfo
save(originalPathogenic_candidateGenesInfo,
file = "~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/Robjects/candidateGenesInfo_Pathogenic_SVs.RData")
###################################
## Exploring cohort Parsed results
###################################
targetPhenos<-c("head_neck",
"cardiovascular",
"limbs",
"neurodevelopmental")##As more phenos considered they will appear here
##Required functions
source("/home/victor/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/SV_LocalAnalysis/MultiplePatientAnalysis/functions/multiSV_analysis_stats_functions.R",
local = TRUE)
##Para High specificity
multiSV_analysis_stats(targetPhenos = targetPhenos, targetResults = cohort_results_hiSpe)
#Para Standard
multiSV_analysis_stats(targetPhenos = targetPhenos, targetResults = cohort_results_standard)
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "neurodevelopmental")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "cardiovascular")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "limbs")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "head_neck")
#####Get number of patients with errors
cohort_results_hiSpe$error_General_Info
cohort_results_standard$error_General_Info
####################################################
##Let's check number of candidateGenes per SV
# View(cohort_results_standard$candidateGenesInfo)
summary(cohort_results_standard$candidateGenesInfo$Ncandidates)##Most of SVs around 6-7 candidate genes
# plot(density(cohort_results_standard$candidateGenesInfo$Ncandidates))
# boxplot(cohort_results_standard$candidateGenesInfo$Ncandidates)
#####################
## Estudio tamanyos
#######################################
##Computing lengths, and excluding translocations, since make no sense compute size and no transloc in controls
AllPatientsInfo<-gettingLengths(targetMatrix = AllPatientsInfo)
table(AllPatientsInfo$TypeSV)
summary(subset(AllPatientsInfo, TypeSV=="Deletion")$length)
summary(subset(AllPatientsInfo, TypeSV=="Duplication")$length)
summary(subset(AllPatientsInfo, TypeSV=="Inversion")$length)
####################################################################
## Script for HTML generation for Web with Patients Cohort Study
####################################################################
##Use maybe the Standard info only
##Loading Standard Mode PARSED results
load(file = "~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/multiplePatientAnalysis/StandardMode_ParsedResults_MultiplePatientAnalyses.RData")
########################################
##HTML generation with cohort results
########################################
###Setwd in the folder where all the app info is hosted
setwd("~/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app/")
##Required functions
source("functions/multiple_SV_Functions/multipleStats_ExplorePreviousPat_htmlGeneration.R")
##AllPatientsInfo table, required for the Patients Info section
load("~/Dropbox/Cantabria/PhD_Project/DatosPHD/fichasPacientes/AllPatientsInfo.RData")
##Phenotypes to be considered
consideredPheno<-c("head_neck",
"cardiovascular",
"limbs",
"neurodevelopmental")##As more phenos considered they will appear here
ExplorePreviousPatients_html<-multipleStats_htmlGeneration(cohort_results = cohort_results_standard,
consideredPheno = consideredPheno,
ids_append="PreviousPat",##to avoid conflicts with tables generated in multiples submission option
AllPatientsInfo=AllPatientsInfo,
explPreviousPatSection = TRUE)
###########################################################################################
##This is the html that is going to be loaded on the Explore Previous Patients Section
##Wrapp in html tags to avoid issues AND save html
###########################################################################################
ExplorePreviousPatients_html<-paste("<html><body>",
ExplorePreviousPatients_html,
"</body></html>",
sep="")
fileConn<-file("~/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app/html_scripts/ExplorePreviousPatients.html")
writeLines(ExplorePreviousPatients_html, fileConn)
close(fileConn)
