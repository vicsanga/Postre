splitedTADs[rowCounter,"start"]<-tads[TADid,"end"]
splitedTADs[rowCounter,"end"]<-tads[TADid,"end"]
}
splitedTADs[rowCounter,"regionID"]<-borderID
}
}
###################################################################
## Preparing TAD coordinates to liftover each of them separately
###################################################################
#Loading liftovered marchal, crazy multi options
tads<-read.delim(file = "/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/GSE202471_MergeRetina2_Domain_Call_TADs_10kb.bed",
header = FALSE,
stringsAsFactors = FALSE
)
colnames(tads)<-c("chr","start","end")
#Identificar cada limite de TAD e.g. TAD1_start TAD1_end
#Para ello primero defining TAD ids
tads$TADid<-paste0("TAD_",1:nrow(tads))
rownames(tads)<-tads$TADid
#Creating object to store splitted TAD coords (start and end separated)
splitedTADs<-as.data.frame(matrix(data = NA, nrow = nrow(tads)*2, #2 rows per TAD, one for start the other for the end
ncol = 4))
colnames(splitedTADs)<-c("chr","start","end","regionID")
#Filling splittedTADs df
rowCounter<-0
for(TADid in tads$TADid){
print(TADid)
for(border in c("start","end")){
print(border)
rowCounter<-rowCounter+1
borderID<-paste0(TADid,"_",border)
##Adding border info to splitedTADs df
splitedTADs[rowCounter,"chr"]<-tads[TADid,"chr"]
if(border=="start"){
splitedTADs[rowCounter,"start"]<-tads[TADid,"start"]
splitedTADs[rowCounter,"end"]<-tads[TADid,"start"]
}else if(border=="end"){
splitedTADs[rowCounter,"start"]<-tads[TADid,"end"]
splitedTADs[rowCounter,"end"]<-tads[TADid,"end"]
}
splitedTADs[rowCounter,"regionID"]<-borderID
}
}
##Storing splitted tads for liftover
write.table(splitedTADs,
file = "/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/hg38_retina_SplitedTAD_coords.bed",
sep="\t",
quote = FALSE,
col.names = FALSE,
row.names = FALSE)
#Next step, liftovering coordinates (hg38 to hg19) with UCSC
#(screenshot in: file:///home/victor/Dropbox/Cantabria/Postdoc/explicacionesProcesados/POSTRE/Eye_Ghent_Collab/Eye_TADsData.odt)
View(splitedTADs)
View(tads)
boundaryLiftovers<-read.delim(file = "/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/liftover_Of_SplittedTAD_Coords_hg38tohg19_hglft_genome_183b1_a12370.bed",
header = FALSE,
stringsAsFactors = FALSE
)
View(boundaryLiftovers)
#Loading liftovered marchal, crazy multi options
tads<-read.delim(file = "/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/Marchal_Retina_TADs_AfterLiftover_To_hg19_hglft_genome_2192b_a17470.bed",
header = FALSE,
stringsAsFactors = FALSE
)
colnames(tads)<-c("chr","start","end")
table(tads$chr)
##Loading ESC TAD maps
esc_tads<-read.delim(file = "/home/victor/Dropbox/Cantabria/PhD_Project/DatosPHD/TAD_maps/hg19.TADs/H1-ESC_Dixon2015-raw_TADs.txt",
header = FALSE,
stringsAsFactors = FALSE
)
colnames(esc_tads)<-c("chr","start","end")
View(esc_tads)
#selecting from ESC only TADs in chrX
esc_tads<-subset(esc_tads, chr=="chrX")
View(esc_tads)
#Loading liftovered marchal TADs
#ChrX missing (not present in the original paper either)
#Notice upon inspecting bed file in IGV (screenshot in file: Eye_TADsData.odt)
retina_tads<-read.delim(file = "/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/Marchal_Retina_TADs_AfterLiftover_To_hg19_hglft_genome_2192b_a17470.bed",
header = FALSE,
stringsAsFactors = FALSE
)
colnames(retina_tads)<-c("chr","start","end")
table(retina_tads$chr)
##Loading ESC TAD maps
esc_tads<-read.delim(file = "/home/victor/Dropbox/Cantabria/PhD_Project/DatosPHD/TAD_maps/hg19.TADs/H1-ESC_Dixon2015-raw_TADs.txt",
header = FALSE,
stringsAsFactors = FALSE
)
colnames(esc_tads)<-c("chr","start","end")
table(esc_tads$chr)
#Loading liftovered marchal TADs
#ChrX missing (not present in the original paper either)
#Notice upon inspecting bed file in IGV (screenshot in file: Eye_TADsData.odt)
retina_tads<-read.delim(file = "/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/Marchal_Retina_TADs_AfterLiftover_To_hg19_hglft_genome_2192b_a17470.bed",
header = FALSE,
stringsAsFactors = FALSE
)
colnames(retina_tads)<-c("chr","start","end")
table(retina_tads$chr)
##Loading ESC TAD maps
esc_tads<-read.delim(file = "/home/victor/Dropbox/Cantabria/PhD_Project/DatosPHD/TAD_maps/hg19.TADs/H1-ESC_Dixon2015-raw_TADs.txt",
header = FALSE,
stringsAsFactors = FALSE
)
colnames(esc_tads)<-c("chr","start","end")
table(esc_tads$chr)
table(retina_tads$chr)
table(esc_tads$chr)
#selecting from ESC only TADs in chrX
esc_chrX_tads<-subset(esc_tads, chr=="chrX")
View(esc_chrX_tads)
View(esc_chrX_tads)
##Loading ESC TAD maps
esc_tads<-read.delim(file = "/home/victor/Dropbox/Cantabria/PhD_Project/DatosPHD/TAD_maps/hg19.TADs/H1-ESC_Dixon2015-raw_TADs.txt",
header = FALSE,
stringsAsFactors = FALSE
)
colnames(esc_tads)<-c("chr","start","end")
table(esc_tads$chr)
#selecting from ESC only TADs in chrX
esc_chrX_tads<-subset(esc_tads, chr=="chrX")
View(esc_chrX_tads)
#Appending chrX TAD coords to retina tads (2882)
retina_tads<-rbind.data.frame(retina_tads, esc_chrX_tads)
View(retina_tads)
table(retina_tads$chr)
#Loading liftovered marchal TADs
#ChrX missing (not present in the original paper either)
#Notice upon inspecting bed file in IGV (screenshot in file: Eye_TADsData.odt)
retina_tads<-read.delim(file = "/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/Marchal_Retina_TADs_AfterLiftover_To_hg19_hglft_genome_2192b_a17470.bed",
header = FALSE,
stringsAsFactors = FALSE
)
colnames(retina_tads)<-c("chr","start","end")
table(retina_tads$chr)
##Loading ESC TAD maps
esc_tads<-read.delim(file = "/home/victor/Dropbox/Cantabria/PhD_Project/DatosPHD/TAD_maps/hg19.TADs/H1-ESC_Dixon2015-raw_TADs.txt",
header = FALSE,
stringsAsFactors = FALSE
)
colnames(esc_tads)<-c("chr","start","end")
table(esc_tads$chr)
#selecting from ESC only TADs in chrX
esc_chrX_tads<-subset(esc_tads, chr=="chrX")
View(esc_chrX_tads)
#Appending chrX TAD coords to retina tads (2882)
retina_tads<-rbind.data.frame(retina_tads, esc_chrX_tads)
table(retina_tads$chr)
#Ensuring properly sorted although I think it already is
retina_tads<-retina_tads[order(retina_tads$chr, retina_tads$start),]
View(retina_tads)
View(retina_tads)
#Ensuring properly sorted although I think it already is
retina_tads<-retina_tads[order(retina_tads$chr, retina_tads$start),]
#########################################################################
## Finalizing Retina TAD map
#e.g. (there are no chrX TADs) Adding the ones from ESC Dixon TAD map
#########################################################################
#Loading liftovered marchal TADs
#ChrX missing (not present in the original paper either)
#Notice upon inspecting bed file in IGV (screenshot in file: Eye_TADsData.odt)
retina_tads<-read.delim(file = "/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/Marchal_Retina_TADs_AfterLiftover_To_hg19_hglft_genome_2192b_a17470.bed",
header = FALSE,
stringsAsFactors = FALSE
)
colnames(retina_tads)<-c("chr","start","end")
table(retina_tads$chr)
##Loading ESC TAD maps
esc_tads<-read.delim(file = "/home/victor/Dropbox/Cantabria/PhD_Project/DatosPHD/TAD_maps/hg19.TADs/H1-ESC_Dixon2015-raw_TADs.txt",
header = FALSE,
stringsAsFactors = FALSE
)
colnames(esc_tads)<-c("chr","start","end")
table(esc_tads$chr)
#selecting from ESC only TADs in chrX
esc_chrX_tads<-subset(esc_tads, chr=="chrX")
#Appending chrX TAD coords to retina tads (2882)
retina_tads<-rbind.data.frame(retina_tads, esc_chrX_tads)
table(retina_tads$chr)
#Ensuring properly sorted although I think it already is
retina_tads<-retina_tads[order(retina_tads$chr, retina_tads$start),]
##Storing finally used TAD map
write.table(retina_tads,
file = "/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/FINAL_TADs/hg19_Retina_TADs_FINAL.bed",
sep="\t",
quote = FALSE,
col.names = FALSE,
row.names = FALSE)
##Used to determine space between last TAD and chr end
chrSizes<-read.delim(file = "~/Documentos/phD/phD_data/hg19.chrom.sizes",
header = FALSE,
stringsAsFactors = FALSE,
sep="\t")
colnames(chrSizes)<-c("chr","size")
#######################
##Tad Maps
## load all the elements in a folder
folderPath<-"/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/FINAL_TADs/"
TADs_paths<-list.files(path = folderPath)
TADs_paths
##to store all the between TAD maps regions
between_TAD_maps<-list()
##scaffold
BtwnTADsScafold<-as.data.frame(matrix(data = NA, nrow = 1, ncol = 3))
colnames(BtwnTADsScafold)<-c("chr","start","end")
for(TAD_file in TADs_paths){
print(TAD_file)
wholePath<-paste0(folderPath,TAD_file)
loadedTAD<-read.table(file = wholePath, header = F, sep="\t",stringsAsFactors = F)
colnames(loadedTAD)<-c("chr","start","end")
## in case it is wrongly done, lets sort TADs regarding: 1st Chr, 2nd Start pos, 3rd End pos
# loadedTAD<-loadedTAD[order(loadedTAD$chr,loadedTAD$start,loadedTAD$end),]
####Creating boundary MAP
BtwnTADs<-BtwnTADsScafold
#hacer subset matriz por chromosoma
for(studiedChr in unique(loadedTAD$chr)){
subsetMapaTADchr<-subset(loadedTAD, chr==studiedChr)
ContadorProceso<-0
for(nfila in 1: (nrow(subsetMapaTADchr) + 1)) {
##El +1 de iteracion adicional es para, especificamente, pillar el hueco entre el ultimo TAD y el final del chromosoma
ContadorProceso<-ContadorProceso + 1
print(ContadorProceso)
print(nfila)
endTAD1<-(-1)##to initialize them
startTAD2<-(-1)
##In case there is a space between chr start and first TAD
if((nfila==1) && (subsetMapaTADchr[1,"start"]!=0)) {
##if nfila igual a 1 i la primera pos no es 0, ello indica que hay un hueco entre el inicio del chr y el primer TAD
#cogemos ese hueco
endTAD1<-0
startTAD2<-subsetMapaTADchr[1,"start"]
}else if((nfila > 1) && (nfila != (nrow(subsetMapaTADchr) + 1))){
##For the common scenario, space between TADs
##AND WE ARE NOT IN THE LAST ITERATION, to capture space between last TAD and chr end
#empezamos a partir de la segunda fila
endTAD1<-subsetMapaTADchr[nfila-1,"end"]
startTAD2<-subsetMapaTADchr[nfila,"start"]
}else if (nfila == (nrow(subsetMapaTADchr) + 1)){
##Last & extra iteration, capture space, if exists, between last TAD and chr end
##In case there is space between last TAD and chr end (most of it will be unknown)
##But get also this regions, because was rising error for some isolated and rare patient (U111 Cardiovascular)
lastTAD<-subsetMapaTADchr[nrow(subsetMapaTADchr),]
##Get space between TAD end and chr end, if exists
targetChrSize<-subset(chrSizes, chr == studiedChr)$size
if(lastTAD$end < targetChrSize){
##There is a space between TAD end and chr end, capture it
endTAD1<-lastTAD$end
startTAD2<-targetChrSize
}
}
###############################################################################
## Storing between TADs - TAD external - regions
##If already found a region between TADs
##pq en la primera iteracion si el TAD empieza en 0 igual no encuentra space
if(endTAD1!=-1 && startTAD2!=-1){
##generate limits
##We add the limit if the TADs are not 100%consecutive,
##it means the next one start at the bp of the last one
##or if there is just one bp of diifference btwn the previous and the next one
if((startTAD2-endTAD1)>1){
BtwnTADsLimits<-BtwnTADsScafold
BtwnTADsLimits[1,"chr"]<-studiedChr
BtwnTADsLimits[1,"start"]<-endTAD1
BtwnTADsLimits[1,"end"]<-startTAD2
##Anyadimos btwnTADlimits
BtwnTADs<-rbind(BtwnTADs,BtwnTADsLimits)
}
}
}
}
##remove first row used to initialize the TAD map matrix
BtwnTADs<-BtwnTADs[-1,]
###name between TAD map
fileBetweenTADs<-paste0("betweenTADs_",TAD_file)
between_TAD_maps[[fileBetweenTADs]]<-BtwnTADs
}
##Used to determine space between last TAD and chr end
chrSizes<-read.delim(file = "~/Documentos/phD/phD_data/hg19.chrom.sizes",
header = FALSE,
stringsAsFactors = FALSE,
sep="\t")
colnames(chrSizes)<-c("chr","size")
#######################
##Tad Maps
## load all the elements in a folder
folderPath<-"/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/FINAL_TADs/"
TADs_paths<-list.files(path = folderPath)
TADs_paths
######################################
#Creating between TAD maps file
#Taking as ref: ~/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/preparingDataForSoftware/genomicData_PhenotypeSpecific/Limb/TAD_maps/0_Limb_Creating_BetweenTADs_Map.R
#.. /genomicData_PhenotypeSpecific/Limb/TAD_maps/0_Limb_Creating_BetweenTADs_Map.R
######################################
########################################
##Let's create the between TADs maps ##
##which are the regions between TADs ##
#######################################
##Used to determine space between last TAD and chr end
chrSizes<-read.delim(file = "~/Documentos/phD/phD_data/hg19.chrom.sizes",
header = FALSE,
stringsAsFactors = FALSE,
sep="\t")
colnames(chrSizes)<-c("chr","size")
#######################
##Tad Maps
## load all the elements in a folder
folderPath<-"/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/FINAL_TADs/"
TADs_paths<-list.files(path = folderPath)
##to store all the between TAD maps regions
between_TAD_maps<-list()
##scaffold
BtwnTADsScafold<-as.data.frame(matrix(data = NA, nrow = 1, ncol = 3))
colnames(BtwnTADsScafold)<-c("chr","start","end")
for(TAD_file in TADs_paths){
print(TAD_file)
wholePath<-paste0(folderPath,TAD_file)
loadedTAD<-read.table(file = wholePath, header = F, sep="\t",stringsAsFactors = F)
colnames(loadedTAD)<-c("chr","start","end")
## in case it is wrongly done, lets sort TADs regarding: 1st Chr, 2nd Start pos, 3rd End pos
# loadedTAD<-loadedTAD[order(loadedTAD$chr,loadedTAD$start,loadedTAD$end),]
####Creating boundary MAP
BtwnTADs<-BtwnTADsScafold
#hacer subset matriz por chromosoma
for(studiedChr in unique(loadedTAD$chr)){
subsetMapaTADchr<-subset(loadedTAD, chr==studiedChr)
ContadorProceso<-0
for(nfila in 1: (nrow(subsetMapaTADchr) + 1)) {
##El +1 de iteracion adicional es para, especificamente, pillar el hueco entre el ultimo TAD y el final del chromosoma
ContadorProceso<-ContadorProceso + 1
print(ContadorProceso)
print(nfila)
endTAD1<-(-1)##to initialize them
startTAD2<-(-1)
##In case there is a space between chr start and first TAD
if((nfila==1) && (subsetMapaTADchr[1,"start"]!=0)) {
##if nfila igual a 1 i la primera pos no es 0, ello indica que hay un hueco entre el inicio del chr y el primer TAD
#cogemos ese hueco
endTAD1<-0
startTAD2<-subsetMapaTADchr[1,"start"]
}else if((nfila > 1) && (nfila != (nrow(subsetMapaTADchr) + 1))){
##For the common scenario, space between TADs
##AND WE ARE NOT IN THE LAST ITERATION, to capture space between last TAD and chr end
#empezamos a partir de la segunda fila
endTAD1<-subsetMapaTADchr[nfila-1,"end"]
startTAD2<-subsetMapaTADchr[nfila,"start"]
}else if (nfila == (nrow(subsetMapaTADchr) + 1)){
##Last & extra iteration, capture space, if exists, between last TAD and chr end
##In case there is space between last TAD and chr end (most of it will be unknown)
##But get also this regions, because was rising error for some isolated and rare patient (U111 Cardiovascular)
lastTAD<-subsetMapaTADchr[nrow(subsetMapaTADchr),]
##Get space between TAD end and chr end, if exists
targetChrSize<-subset(chrSizes, chr == studiedChr)$size
if(lastTAD$end < targetChrSize){
##There is a space between TAD end and chr end, capture it
endTAD1<-lastTAD$end
startTAD2<-targetChrSize
}
}
###############################################################################
## Storing between TADs - TAD external - regions
##If already found a region between TADs
##pq en la primera iteracion si el TAD empieza en 0 igual no encuentra space
if(endTAD1!=-1 && startTAD2!=-1){
##generate limits
##We add the limit if the TADs are not 100%consecutive,
##it means the next one start at the bp of the last one
##or if there is just one bp of diifference btwn the previous and the next one
if((startTAD2-endTAD1)>1){
BtwnTADsLimits<-BtwnTADsScafold
BtwnTADsLimits[1,"chr"]<-studiedChr
BtwnTADsLimits[1,"start"]<-endTAD1
BtwnTADsLimits[1,"end"]<-startTAD2
##Anyadimos btwnTADlimits
BtwnTADs<-rbind(BtwnTADs,BtwnTADsLimits)
}
}
}
}
##remove first row used to initialize the TAD map matrix
BtwnTADs<-BtwnTADs[-1,]
###name between TAD map
fileBetweenTADs<-paste0("betweenTADs_",TAD_file)
between_TAD_maps[[fileBetweenTADs]]<-BtwnTADs
}
##########
#Save betweenTAD maps
save(between_TAD_maps, file = "~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/Robjects/Vision_BetweenTAD_Maps.RData")
View(loadedTAD)
View(BtwnTADs)
##For now in this developmental Stage we are dealing with this phases:
############################################################
##Loading name of the phases, which will be exactly the same, to do the matching, between Expression AND Enhancers Data
##+ phaseFree
phasesVector<-c("Retina", "RPE", "phaseFree")
##TAD maps location
folderPath<-"/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/FINAL_TADs/"
TADs_paths<-list.files(path = folderPath)
TADs_paths
TAD_maps<-list()
for(TAD_file in TADs_paths){
##Tad Maps
## load all the elements in a folder
# #print(TAD_file)
wholePath<-paste0(folderPath,TAD_file)
loadedTAD<-read.table(file = wholePath, header = F, sep="\t",stringsAsFactors = F)
colnames(loadedTAD)<-c("chr","start","end")
## in case it is wrongly done, lets sort TADs regarding: 1st Chr, 2nd Start pos, 3rd End pos
loadedTAD<-loadedTAD[order(loadedTAD$chr,loadedTAD$start,loadedTAD$end),]
TAD_maps[[TAD_file]]<-loadedTAD
}
rm(loadedTAD)
load("~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/Robjects/Vision_BetweenTAD_Maps.RData")
##If only (ideally & final POSTRE config) a TAD map per stage, the list per stage will present just one element
Master_regulatoryDomains_list<-list("TADs"=tadMapsList, "betweenTADs"=between_tadMapsList)
##For now in this developmental Stage we are dealing with this phases:
############################################################
##Loading name of the phases, which will be exactly the same, to do the matching, between Expression AND Enhancers Data
##+ phaseFree
phasesVector<-c("Retina", "RPE", "phaseFree")
##TAD maps location
folderPath<-"/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/FINAL_TADs/"
TADs_paths<-list.files(path = folderPath)
folderPath
####################################################
# Defining TAD map POSTRE object for Vision
# Take as reference limb TAD map preparation scripts
# ~/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/preparingDataForSoftware/genomicData_PhenotypeSpecific/Limb/TAD_maps/1_Limb_Preparing_TADmap_Object.R
####################################################
####################################################################################################
## Preparing TAD maps data for Vision phenotype
## If only (ideally) a TAD map per stage, the list will present just one element  (final postre config like this)
## Two lists: One for TADs, one for BetweenTADs
## In case a breakpoint falls in the space between TADs,
## So the name of the TADs list and the between TADs match 1 to 1, per TAD map between TAD map
####################################################################################################
##For now in this developmental Stage we are dealing with this phases:
############################################################
##Loading name of the phases, which will be exactly the same, to do the matching, between Expression AND Enhancers Data
##+ phaseFree
phasesVector<-c("Retina", "RPE", "phaseFree")
##For each of the developmental phases. We need to provide its tad map and between tad map
##For this particular case we use different TAD maps (because no hiC data for them), which are in addition the same for the different developmental conditions.
##TAD maps location
folderPath<-"/home/victor/Documentos/postDoc/colaboraciones/postreColab/eye/TADs/FINAL_TADs/"
TADs_paths<-list.files(path = folderPath)
TAD_maps<-list()
for(TAD_file in TADs_paths){
##Tad Maps
## load all the elements in a folder
# #print(TAD_file)
wholePath<-paste0(folderPath,TAD_file)
loadedTAD<-read.table(file = wholePath, header = F, sep="\t",stringsAsFactors = F)
colnames(loadedTAD)<-c("chr","start","end")
## in case it is wrongly done, lets sort TADs regarding: 1st Chr, 2nd Start pos, 3rd End pos
loadedTAD<-loadedTAD[order(loadedTAD$chr,loadedTAD$start,loadedTAD$end),]
TAD_maps[[TAD_file]]<-loadedTAD
}
rm(loadedTAD)
#########################
##Between TAD maps
##The coordinates of the regions between TADs
load("~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/Robjects/Vision_BetweenTAD_Maps.RData")
####################################
## Creating relevant App Object
####################################
##We associate TAD specifically to each developmental stage
tadMapsList<-list("Retina"=TAD_maps,"RPE"=TAD_maps, "phaseFree"=TAD_maps)
between_tadMapsList<-list("Retina"=between_TAD_maps, "RPE"=between_TAD_maps, "phaseFree"=between_TAD_maps)
##If only (ideally & final POSTRE config) a TAD map per stage, the list per stage will present just one element
Master_regulatoryDomains_list<-list("TADs"=tadMapsList, "betweenTADs"=between_tadMapsList)
#####################################
## Saving Object
save(Master_regulatoryDomains_list, file ="~/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app/data/specificData_PerPhenotype/vision_eye/Master_RegulatoryDomains_Vision_Eye.RData" )
library(Seurat)
shiny::runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
library(rsconnect)
rsconnect::deployApp('/home/victor/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app/',
account = 'svradalab')
rsconnect::deployApp('/home/victor/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app/',
account = 'svradalab')
shiny::runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
rsconnect::deployApp('/home/victor/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app/',
account = 'svradalab')
####################################
##Gene relationship with phenotypes. Either from OMIM or Mammalian Phenotype Ontology
##based on OMIM and human phenotypes. Table
##3410 gene-phenotype relationships based on OMIM and HPO
load(file ="data/gene_fenotipe_basedOn_hpoAndOmim.RData")
setwd("~/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app")
miceBased_genePhenotype<-gene_fenotipe_table
####################################
##Gene relationship with phenotypes. Either from OMIM or Mammalian Phenotype Ontology
##based on OMIM and human phenotypes. Table
##3410 gene-phenotype relationships based on OMIM and HPO
load(file ="data/gene_fenotipe_basedOn_hpoAndOmim.RData")
####################################
##Gene relationship with phenotypes. Either from OMIM or Mammalian Phenotype Ontology
##based on OMIM and human phenotypes. Table
##3410 gene-phenotype relationships based on OMIM and HPO
load(file ="data/gene_fenotipe_basedOn_hpoAndOmim.RData")
humanBased_genePhenotype<-gene_fenotipe_table
rm(gene_fenotipe_table)
##Human orthologues,Based on Mice genes and Mice Phenotypes
##10471 genes
load(file ="data/gene_fenotipe_basedOn_mgi_and_MP.RData")
miceBased_genePhenotype<-gene_fenotipe_table
rm(gene_fenotipe_table)
colnames(humanBased_genePhenotype)
colnames(miceBased_genePhenotype)
View(humanBased_genePhenotype)
