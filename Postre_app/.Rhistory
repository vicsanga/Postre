View(DEGs_downReg)
#################################
## Expresion Diferencial Cancer
#################################
##Datos de GEO Database, identificador: GSE148036
##Link a tabla: https://ftp.ncbi.nlm.nih.gov/geo/series/GSE148nnn/GSE148036/suppl/GSE148036%5FPRJNA609278count%5Fmatrix%2Etxt%2Egz
#################################################
library(DESeq2)
##Cargando Tabla de conteo de lecturas por gene
## Read Counts Matrix
expData<-read.delim(file ="/home/victor/Documentos/phD/manyFolders/cursos_Relevantes/Master_UV/2022/Ejercicio8_ExpresionDiferencial/data/GSE148036_PRJNA609278count_matrix.txt",
sep="\t",
stringsAsFactors = FALSE)
##Formatting expData
rownames(expData)<-expData$Geneid
expData$Geneid<-NULL
##Selecciono solo las columnas de interes para este ejercicio: informaciÃ³n de pulmon sano Vs Cancer de Pulmon
colnames(expData)
relevantCols<-c(paste0("NM00",1:5),
paste0("AD00",1:5)) ##NM es de Normal y AD de Adenocarcinoma (tipo de tumor)
expData<-expData[,relevantCols]
#############################################################
# Generacion de una matriz con la informacion del experimento
#############################################################
grupo <- c(rep("Normal",5),rep("Cancer",5))
experimentInfo<- data.frame(Condicion=as.factor(grupo))
rownames(experimentInfo) <- colnames(expData)
#echadle un ojo a la matriz
experimentInfo
#############################
# Creacion del objeto Deseq2
#############################
##Aqui quitar alguna linea para que lo toqueteen, simplemente quitar expData por matriz datos expresion y experimentInfo por matrizDatosExperimento
deseqObject<-DESeqDataSetFromMatrix(countData=expData,
colData=experimentInfo,
design=~Condicion)
##Especificamos que el nivel de referencia es la situacion Normal
##Sino coge situacion de cancer (orden alfabetico)
#Definir el nivel de referencia hace que las comparativas se hagan respecto a la condicion Normal
##Si tuviesemos >2 condiciones, como la de tuberculosisi esta consideracion seria importante
deseqObject$Condicion <-relevel(deseqObject$Condicion, ref="Normal")
Adenocarcinoma_DESeq <- DESeq(deseqObject)
#################################################
# Obtencion Resultados expresion diferencial
#################################################
res <- results(Adenocarcinoma_DESeq)
###Visualizacion Resultados por MA plot
plotMA(res)
##Extraccion tabla resultados (p valores y fold changes para cada gene en el analisis de expresion diferencial)
resDifExp<-as.data.frame(res)
nrow(resDifExp)
##################################
## Seleccionamos los que estan UpRegulated (aumentan su expresion en tejido tumoral frente a tejido sano) de manera significativa
## Seleccionad aquellos genes (vamos a ser exigentes): con log2FoldChange>=2 y p valor ajustado (padj)<0.001
##################################
DEGs_upReg<-as.data.frame(subset(resDifExp, log2FoldChange>=2 & padj<0.001))
write.table(cbind(rownames(DEGs_upReg)),"/home/victor/Documentos/phD/manyFolders/cursos_Relevantes/Master_UV/2022/Ejercicio8_ExpresionDiferencial/resultados/Adenocarcinoma_upReg_Genes.txt",
sep="\t",
col.names=FALSE,
row.names=FALSE,
quote = FALSE)
##################################
## Seleccionamos los que estan DownRegulated (disminuyen su expresion en tejido tumoral frente a tejido sano) de manera significativa
## Seleccionad aquellos genes (vamos a ser exigentes): con log2FoldChange<=-2 y p valor ajustado (padj)<0.001
##################################
##Dowregulated, salen cosas de pulmonary, si ponemos categoria de phenotype
DEGs_downReg<-as.data.frame(subset(resDifExp, log2FoldChange<=-2 & padj<0.001))
write.table(cbind(rownames(DEGs_downReg)),"/home/victor/Documentos/phD/manyFolders/cursos_Relevantes/Master_UV/2022/Ejercicio8_ExpresionDiferencial/resultados/Adenocarcinoma_downReg_Genes.txt",
sep="\t",
col.names=FALSE,
row.names=FALSE,
quote = FALSE)
#################################
## Paron aqui para hacer Functional Enrichment Analysis!!
##################################
##All DEGs
DEGs_All<-c(rownames(DEGs_upReg), rownames(DEGs_downReg))
################################################################
######################################################################################################################################
## Extraccion de datos de lecturas normalizadas (tabla de expresion inicial normalizada)
## Esto no son fpkms, es otra normalizacion que hace Deseq, permite tambien comparar los valores de expresion de genes Entre Muestras
######################################################################################################################################
c <- estimateSizeFactors(Adenocarcinoma_DESeq)
expData_Normalizada<- counts(c,normalized=TRUE)
#####################################################################################
## Heatmap unicamente con los genes seleccionados como UpRegulated y DownRegulated
## Atendiendo a los valores de Expresion Normalizados
#####################################################################################
dataHeatmap<-expData_Normalizada[DEGs_All,]
library(gplots)
###Scaling per row, so that color more comparable
heatmap.2(x = dataHeatmap,Rowv=FALSE, Colv=TRUE, scale="row", trace="none", margins=c(10,15))
source("https://raw.githubusercontent.com/vicsanga/Postre/main/Postre_wrapper.R")
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
patientResults
names(patientResults)
patientResults$heatmapSummary
shiny::runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
source("https://raw.githubusercontent.com/vicsanga/Postre/main/Postre_wrapper.R")
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
source("https://raw.githubusercontent.com/vicsanga/Postre/main/Postre_wrapper.R")
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
source('~/.active-rstudio-document')
source("https://raw.githubusercontent.com/vicsanga/Postre/main/Postre_wrapper.R")
source("https://raw.githubusercontent.com/vicsanga/Postre/main/Postre_wrapper.R")
source("https://raw.githubusercontent.com/vicsanga/Postre/main/Postre_wrapper.R")
runApp('Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app')
##########################################################################
## Ejemplo de analisis sencillo via RandomForest + Exploracion Inicial
##########################################################################
load(file = "/home/victor/Documentos/phD/manyFolders/cursos_Relevantes/Master_UV/2022/Ejercicio3_AnalisisImagen_CancerMama/RData/fna_breast.RData")
##Definimos variable ID como nombre de fila
rownames(cancer_data)<-cancer_data$id
##Quitamos id variable
cancer_data$id<-NULL
####################################
##Exploracion inicial datos
#########
library(ggplot2)
str(cancer_data)
table(cancer_data$diagnosis) ##No esta 100% balanceado
##Aislamos datos numericos (excluyendo diagnostico)
numericData<-cancer_data[,-1]
x11()
ggplot(stack(numericData), aes(x = ind, y = values)) +
geom_boxplot() + coord_flip()
##################################
##Estudio correlacion variables
library(psych)
library(corrplot)
res <- cor(numericData) ##Vistazo rapido vemos como algunas varibles muy correlacionadas
##Exploracion via heatmap correlaciones
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
##Se aprecia como algunas muy correlacionadas.
pairs.panels(cancer_data[,c("area_mean","perimeter_mean","radius_mean")],
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE,
smooth =  TRUE# show correlation ellipses
)
###################################
##Realizamos PCA con PCA tools
library(PCAtools)
##Estudio distribucion variables
infoExp<-data.frame("diagnosis"=cancer_data$diagnosis)
rownames(infoExp)<-rownames(cancer_data)
cancer_pca<-PCAtools::pca(mat = numericData,
transposed = TRUE,
center = TRUE,
scale = TRUE,##Tenemos variables en rangos de variacion claramente diferentes, escalamos pues
metadata = infoExp
)
##Plot per a components 1 i 2
biplot(cancer_pca, colby = "diagnosis", x="PC1", y="PC2", pointSize = 2, lab = "", legendPosition = "right")
##Echemos un ojo a alguna varible que pueda servir para separar biopsias sanas de tumorales
##PCA loadings
##Echamos vistazo a peso de cada variable, en valor absoulto sobre los 2 primeros componenentes
filtLoadings<-abs(cancer_pca$loadings[,1:2])
filtLoadings<-filtLoadings[order(filtLoadings$PC1, decreasing = TRUE),]
##Variable con mas peso en componente1
rownames(filtLoadings)[1]##"concave.points_mean"
library(ggplot2)
ggplot(data = cancer_data,aes(x=diagnosis,fill=diagnosis, y=concave.points_mean))+
geom_violin()+
geom_boxplot(width=0.1,lwd=0.5) +
ggtitle("Diferencias concave.points_mean entre muestras B y M")
View(cancer_data)
100-94.9
100-91.6
100-97.3
100-86
source("https://raw.githubusercontent.com/vicsanga/Postre/main/Postre_wrapper.R")
############
## Loading prediction results approach 2
load("~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/Robjects/results_PredictionsHealthyControls_approach1.RData")
## Loading SVs information
load(file = "~/Dropbox/Cantabria/PhD_Project/DatosPHD/fichasPacientes/healthyControls_approach1.RData")
##Phenotypes to be considered
consideredPheno<-c("head_neck",
"cardiovascular",
"limbs",
"neurodevelopmental")##As more phenos considered they will appear here
###Setwd in the folder where all the app info is hosted
setwd("~/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app/")
##############################################
##Loading Required Function
source("functions/multiple_SV_Functions/cohortResults_Parser.R")
########
#Renaming input data
AllPatientsInfo<-healthyControls_readyForSoftware
rm(healthyControls_readyForSoftware)
#############
#Parsing predictions
cohort_results_hiSpe<-cohortResults_Parser(minScore = 0.8, all_patientResults = resultsPerMode$`High-Specificity`,
consideredPheno =consideredPheno,##Improve as more Phenos can be processed##consideredPheno,##Multiple Option, for now stick with head_neck
discardRelevantByBrokenGene = FALSE,
AllPatientsInfo = AllPatientsInfo )
cohort_results_standard<-cohortResults_Parser(minScore = 0.8, all_patientResults = resultsPerMode$Standard,
consideredPheno =consideredPheno,##Improve as more Phenos can be processed##consideredPheno,##Multiple Option, for now stick with head_neck
discardRelevantByBrokenGene = FALSE,
AllPatientsInfo = AllPatientsInfo )
##patients predictions stats
functionStatistics_predictions<-function(targetResults, phenotype){
predictedPatients<-unlist(lapply(X = targetResults[[phenotype]]$anyMechanism$patients, FUN = function(x){
unlist(strsplit(x = x, split = ",", fixed = TRUE))
}))
predictedPatients<-unique(predictedPatients)
##Stats
print("----------------------------------------------------------------------")
cat("N predictions: ", length(predictedPatients), "\n")
cat("N NO predictions: ",nrow(targetResults[[phenotype]]$patientsInfo) - length(predictedPatients) ,"\n")
cat("N total patients: ", nrow(targetResults[[phenotype]]$patientsInfo), "\n")
cat("Ratio N predicted vs N total", length(predictedPatients)/nrow(targetResults[[phenotype]]$patientsInfo), "\n")
########################################
## Proporciones tema fallos & aciertos
########################################
print("----------------------------------------------------------------------")
##N mistakes
print(table(targetResults[[phenotype]]$patientsInfo[predictedPatients,]$TypeSV))
##Coming from
print(table(targetResults[[phenotype]]$patientsInfo$TypeSV))
##Ojear errores por division de proporciones
# ##Proportion of mistakes associated with any SV in particular?
# print(
#   table(targetResults[[phenotype]]$patientsInfo[predictedPatients,]$TypeSV)/
#     table(targetResults[[phenotype]]$patientsInfo$TypeSV)
# )
#
# print(prop.table(colSums(targetResults[[phenotype]]$anyMechanism[,c("DirectEffectLOF","LongRangeLOF","DirectEffectGOF","LongRangeGOF")])))
##Distribution LOF vs GOF
print(colSums(targetResults[[phenotype]]$anyMechanism[,c("DirectEffectLOF","LongRangeLOF","DirectEffectGOF","LongRangeGOF")]))
}
##For neurodevelopmental
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "neurodevelopmental")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "neurodevelopmental")
##For neurodevelopmental
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "neurodevelopmental")
##For head_neck
##Da un error por division de proporciones
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "head_neck")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "head_neck")
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "cardiovascular")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "cardiovascular")
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "limbs")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "limbs")
#####Get number of patients with errors
cohort_results_hiSpe$error_General_Info
cohort_results_standard$error_General_Info
View(AllPatientsInfo)
AllPatientsInfo["gnomAD-SV_v2.1_DEL_5_62114",]
AllPatientsInfo["gnomAD-SV_v2.1_DEL_5_57790",]
#####Get number of patients with errors
cohort_results_hiSpe$error_General_Info
cohort_results_standard$error_General_Info
##For neurodevelopmental
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "neurodevelopmental")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "neurodevelopmental")
##For head_neck
##Da un error por division de proporciones
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "head_neck")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "head_neck")
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "cardiovascular")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "cardiovascular")
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "limbs")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "limbs")
##For neurodevelopmental
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "neurodevelopmental")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "neurodevelopmental")
##For head_neck
##Da un error por division de proporciones
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "head_neck")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "head_neck")
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "cardiovascular")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "cardiovascular")
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "limbs")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "limbs")
#########################################
## Parsing Predictions Approach 2
#########################################
##CHECK PATIENTS WITH ERRORS RISED IF ANY
##TAKE AS REFERENCE SCRIPT: ~/Documentos/phD/SV_app_backup/SV_LocalAnalysis_backup_21Dic_2021/MultiplePatientAnalysis/evaluatingSpecificity_OnHealthyIndividuals/Considering_Most_Of_SVs/3_ParsingResults.R
############
## Loading prediction results approach 2
load("~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/Robjects/results_PredictionsHealthyControls_approach2.RData")
## Loading SVs information
load(file = "~/Dropbox/Cantabria/PhD_Project/DatosPHD/fichasPacientes/healthyControls_approach2.RData")
########################
# NOT TOUCHING FROM HERE. Use the remaining script above for all kind of prediction, either controls or pathogenic
# When doing them locally
########################
##Phenotypes to be considered
consideredPheno<-c("head_neck",
"cardiovascular",
"limbs",
"neurodevelopmental")##As more phenos considered they will appear here
###Setwd in the folder where all the app info is hosted
setwd("~/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/SV_app")
##############################################
##Loading Required Function
source("functions/multiple_SV_Functions/cohortResults_Parser.R")
########
#Renaming input data
AllPatientsInfo<-healthyControls_readyForSoftware
rm(healthyControls_readyForSoftware)
#############
#Parsing predictions
cohort_results_hiSpe<-cohortResults_Parser(minScore = 0.8, all_patientResults = resultsPerMode$`High-Specificity`,
consideredPheno =consideredPheno,##Improve as more Phenos can be processed##consideredPheno,##Multiple Option, for now stick with head_neck
discardRelevantByBrokenGene = FALSE,
AllPatientsInfo = AllPatientsInfo )
cohort_results_standard<-cohortResults_Parser(minScore = 0.8, all_patientResults = resultsPerMode$Standard,
consideredPheno =consideredPheno,##Improve as more Phenos can be processed##consideredPheno,##Multiple Option, for now stick with head_neck
discardRelevantByBrokenGene = FALSE,
AllPatientsInfo = AllPatientsInfo )
###################################
## Exploring cohort Parsed results
###################################
##patients predictions stats
functionStatistics_predictions<-function(targetResults, phenotype){
predictedPatients<-unlist(lapply(X = targetResults[[phenotype]]$anyMechanism$patients, FUN = function(x){
unlist(strsplit(x = x, split = ",", fixed = TRUE))
}))
predictedPatients<-unique(predictedPatients)
##Stats
print("----------------------------------------------------------------------")
cat("N predictions: ", length(predictedPatients), "\n")
cat("N NO predictions: ",nrow(targetResults[[phenotype]]$patientsInfo) - length(predictedPatients) ,"\n")
cat("N total patients: ", nrow(targetResults[[phenotype]]$patientsInfo), "\n")
cat("Ratio N predicted vs N total", length(predictedPatients)/nrow(targetResults[[phenotype]]$patientsInfo), "\n")
########################################
## Proporciones tema fallos & aciertos
########################################
print("----------------------------------------------------------------------")
##N mistakes
print(table(targetResults[[phenotype]]$patientsInfo[predictedPatients,]$TypeSV))
##Coming from
print(table(targetResults[[phenotype]]$patientsInfo$TypeSV))
##Ojear errores por division de proporciones
# ##Proportion of mistakes associated with any SV in particular?
# print(
#   table(targetResults[[phenotype]]$patientsInfo[predictedPatients,]$TypeSV)/
#     table(targetResults[[phenotype]]$patientsInfo$TypeSV)
# )
#
# print(prop.table(colSums(targetResults[[phenotype]]$anyMechanism[,c("DirectEffectLOF","LongRangeLOF","DirectEffectGOF","LongRangeGOF")])))
##Distribution LOF vs GOF
print(colSums(targetResults[[phenotype]]$anyMechanism[,c("DirectEffectLOF","LongRangeLOF","DirectEffectGOF","LongRangeGOF")]))
}
##For neurodevelopmental
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "neurodevelopmental")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "neurodevelopmental")
##For neurodevelopmental
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "neurodevelopmental")
##For neurodevelopmental
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "neurodevelopmental")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "neurodevelopmental")
##For head_neck
##Da un error por division de proporciones
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "head_neck")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "head_neck")
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "cardiovascular")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "cardiovascular")
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "limbs")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "limbs")
#####Get number of patients with errors
cohort_results_hiSpe$error_General_Info
cohort_results_standard$error_General_Info
##For neurodevelopmental
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "neurodevelopmental")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "neurodevelopmental")
##For neurodevelopmental
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "neurodevelopmental")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "neurodevelopmental")
##For head_neck
##Da un error por division de proporciones
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "head_neck")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "head_neck")
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "cardiovascular")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "cardiovascular")
functionStatistics_predictions(targetResults = cohort_results_hiSpe, phenotype = "limbs")
functionStatistics_predictions(targetResults = cohort_results_standard, phenotype = "limbs")
#####Get number of patients with errors
cohort_results_hiSpe$error_General_Info
cohort_results_standard$error_General_Info
#########################################
## Performing Predictions Approach 5
#########################################
##Loading controls data
load(file = "~/Dropbox/Cantabria/PhD_Project/DatosPHD/fichasPacientes/healthyControls_approach5.RData")
##Defining output filename:
outputObjectName<-"~/Dropbox/Cantabria/PhD_Project/Resultados/softwareObjects/Robjects/results_PredictionsHealthyControls_approach5.RData"
#########################################
##Renaming input object
#########################################
AllPatientsInfo<-healthyControls_readyForSoftware
rm(healthyControls_readyForSoftware)
########################
# NOT TOUCHING FROM HERE. Use the remaining script above for all kind of prediction, either controls or pathogenic
# When doing them locally
########################
##So far modelled in the software
##When doing multiple patient and pheno analysis, considered pheno
##If not here,  not do prediction
consideredPheno<-c("head_neck",
"cardiovascular",
"limbs",
"neurodevelopmental")##As more phenos considered they will appear here
###############################################
## Testing Performance on selected controls
###############################################
####################################################################################
## Multiple SV Analysis
####################################################################################
start<-Sys.time()
###Setwd in the folder where all the app info is hosted
##To use the most recent function versions
setwd("~/Dropbox/Cantabria/PhD_Project/ScriptsPhd/ScriptsParaUsoLocal/Postre/Postre_app/")
################################################
## Iterating over Cohort of controls
################################################
#################################################
##From here just a function to get patient score
#################################################
source(file = "functions/Master_Scoring_Function.R", local = TRUE)
##In case I need the rounding function##To deal with rounding .5 problems ##round2 function
source(file = "functions/roundingHalfs.R", local = FALSE) ##Local == FALSE to be loaded in the global env so that all functions can find it
##############################
##Patient Analysis &&  Results
##############################
all_patientResults<-list()
##Tracking Status
nPatient<-0
cohortTractablePhenos<-character() ##To track patient provided phenotypes, only sections in the html related to patient phenotypes will be shown. No sense on showing cardiovascular sectio in the html, if no patient with cardiovascular.
##Phenos considered when we also have data from them (eg if patient limb but yet no limb data also not section)
##Let's do the prediction for each running mode
runningMode_options<-c("Standard","High-Specificity") ## "High-Sensitivity" DEPRECATED
resultsPerMode<-list()##To store results
for(runMode in runningMode_options){
print(runMode)
for(patient in rownames(AllPatientsInfo)){
print("                   ")
print(patient)
nPatient<-nPatient+1
cat("nPatient: ",nPatient,"\n")
########################################
## Selecting Patient Info
patientInfo<-AllPatientsInfo[patient,]
all_patientPheno<-unlist(strsplit(x = patientInfo$Phenotype, split = ",", fixed = TRUE))
for(pheno in all_patientPheno){
print("                   ")
print(pheno)
##Working on each pheno separately, running prediction
monoPheno_patientInfo<-patientInfo
monoPheno_patientInfo$Phenotype<-pheno
print(monoPheno_patientInfo)
##If pheno among the ones considered in the app, run prediction
if(pheno %in% consideredPheno){
############################
## Carrying prediction #####
############################
cohortTractablePhenos<-c(cohortTractablePhenos, pheno)##We track this phenotype, and we will provide information for it in the multi pat section
patientResults<-list()
patientResults<-tryCatch({
##If there is an error the following instruction will not be terminated
##In multiple screening we do not generate graphics,so only master_scoring_function used, and not the wrapper for graphics one
patientResults<-master_scoring_function(patientInfo = monoPheno_patientInfo, runMode = runMode)
##If there was no error patientResults$Status == "OK" or "OK, but NO genes associated with SV"
},error = function(err){
patientResults$Status<-"ERROR"
return(patientResults)
})
################################################
## Storaging Results per Patient & Phenotype
################################################
##To avoid the object size to be unnecessary huge, only mantain strictly necessary info
##We can maybe even simplify this more by using the matrix behind heatmap
##but let's see for now how it goes
patientResults$resultsPerPhase_secondaryInfo<-NULL
patientResults$genomeBrowser_links<-NULL
patientResults$allAffectedGenes_positionalInfo<-NULL
patientResults$MasterEnh_map<-NULL
patientResults$resultsPerPhase<-NULL
all_patientResults[[patient]][[pheno]]<-patientResults
}
}
}
resultsPerMode[[runMode]]<-all_patientResults
}
start
Sys.time()
#####################
###Saving results
######################
save(resultsPerMode, file = outputObjectName)
source("https://raw.githubusercontent.com/vicsanga/Postre/main/Postre_wrapper.R")
source("https://raw.githubusercontent.com/vicsanga/Postre/main/Postre_wrapper.R")
